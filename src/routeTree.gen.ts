/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ProtectedIndexImport } from './routes/_protected/index'
import { Route as ProtectedSettingsImport } from './routes/_protected/settings'
import { Route as ProtectedWorldsNewImport } from './routes/_protected/worlds.new'
import { Route as ProtectedWorldsWorldIndexImport } from './routes/_protected/worlds.$world.index'
import { Route as ProtectedWorldsWorldCharactersCharacterIndexImport } from './routes/_protected/worlds.$world.characters.$character.index'

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedSettingsRoute = ProtectedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedWorldsNewRoute = ProtectedWorldsNewImport.update({
  id: '/worlds/new',
  path: '/worlds/new',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedWorldsWorldIndexRoute = ProtectedWorldsWorldIndexImport.update({
  id: '/worlds/$world/',
  path: '/worlds/$world/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedWorldsWorldCharactersCharacterIndexRoute =
  ProtectedWorldsWorldCharactersCharacterIndexImport.update({
    id: '/worlds/$world/characters/$character/',
    path: '/worlds/$world/characters/$character/',
    getParentRoute: () => ProtectedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/worlds/new': {
      id: '/_protected/worlds/new'
      path: '/worlds/new'
      fullPath: '/worlds/new'
      preLoaderRoute: typeof ProtectedWorldsNewImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/worlds/$world/': {
      id: '/_protected/worlds/$world/'
      path: '/worlds/$world'
      fullPath: '/worlds/$world'
      preLoaderRoute: typeof ProtectedWorldsWorldIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/worlds/$world/characters/$character/': {
      id: '/_protected/worlds/$world/characters/$character/'
      path: '/worlds/$world/characters/$character'
      fullPath: '/worlds/$world/characters/$character'
      preLoaderRoute: typeof ProtectedWorldsWorldCharactersCharacterIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedSettingsRoute: typeof ProtectedSettingsRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedWorldsNewRoute: typeof ProtectedWorldsNewRoute
  ProtectedWorldsWorldIndexRoute: typeof ProtectedWorldsWorldIndexRoute
  ProtectedWorldsWorldCharactersCharacterIndexRoute: typeof ProtectedWorldsWorldCharactersCharacterIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedSettingsRoute: ProtectedSettingsRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedWorldsNewRoute: ProtectedWorldsNewRoute,
  ProtectedWorldsWorldIndexRoute: ProtectedWorldsWorldIndexRoute,
  ProtectedWorldsWorldCharactersCharacterIndexRoute:
    ProtectedWorldsWorldCharactersCharacterIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof ProtectedRouteWithChildren
  '/settings': typeof ProtectedSettingsRoute
  '/': typeof ProtectedIndexRoute
  '/worlds/new': typeof ProtectedWorldsNewRoute
  '/worlds/$world': typeof ProtectedWorldsWorldIndexRoute
  '/worlds/$world/characters/$character': typeof ProtectedWorldsWorldCharactersCharacterIndexRoute
}

export interface FileRoutesByTo {
  '/settings': typeof ProtectedSettingsRoute
  '/': typeof ProtectedIndexRoute
  '/worlds/new': typeof ProtectedWorldsNewRoute
  '/worlds/$world': typeof ProtectedWorldsWorldIndexRoute
  '/worlds/$world/characters/$character': typeof ProtectedWorldsWorldCharactersCharacterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/settings': typeof ProtectedSettingsRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/worlds/new': typeof ProtectedWorldsNewRoute
  '/_protected/worlds/$world/': typeof ProtectedWorldsWorldIndexRoute
  '/_protected/worlds/$world/characters/$character/': typeof ProtectedWorldsWorldCharactersCharacterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/settings'
    | '/'
    | '/worlds/new'
    | '/worlds/$world'
    | '/worlds/$world/characters/$character'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/settings'
    | '/'
    | '/worlds/new'
    | '/worlds/$world'
    | '/worlds/$world/characters/$character'
  id:
    | '__root__'
    | '/_protected'
    | '/_protected/settings'
    | '/_protected/'
    | '/_protected/worlds/new'
    | '/_protected/worlds/$world/'
    | '/_protected/worlds/$world/characters/$character/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/settings",
        "/_protected/",
        "/_protected/worlds/new",
        "/_protected/worlds/$world/",
        "/_protected/worlds/$world/characters/$character/"
      ]
    },
    "/_protected/settings": {
      "filePath": "_protected/settings.tsx",
      "parent": "/_protected"
    },
    "/_protected/": {
      "filePath": "_protected/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/worlds/new": {
      "filePath": "_protected/worlds.new.tsx",
      "parent": "/_protected"
    },
    "/_protected/worlds/$world/": {
      "filePath": "_protected/worlds.$world.index.tsx",
      "parent": "/_protected"
    },
    "/_protected/worlds/$world/characters/$character/": {
      "filePath": "_protected/worlds.$world.characters.$character.index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
